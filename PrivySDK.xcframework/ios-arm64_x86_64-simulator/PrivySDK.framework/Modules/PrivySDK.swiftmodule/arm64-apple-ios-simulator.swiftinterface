// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PrivySDK
import Combine
import Foundation
@_exported import PrivySDK
import Swift
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias EmbeddedWalletStateChangeCallback = (PrivySDK.EmbeddedWalletState) -> Swift.Void
public protocol EmbeddedWalletManager {
  var embeddedWalletState: PrivySDK.EmbeddedWalletState { get }
  func setEmbeddedWalletStateChangeCallback(_ callback: PrivySDK.EmbeddedWalletStateChangeCallback?)
  #if compiler(>=5.3) && $AsyncAwait
  func createWallet(allowAdditional: Swift.Bool) async throws -> PrivySDK.WalletCreateResponseData
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func connectWallet(retryOnFailure: Swift.Bool) async throws -> PrivySDK.WalletConnectResponseData
  #endif
  func getProvider(for walletAddress: Swift.String) throws -> any PrivySDK.EmbeddedWalletProvider
  #if compiler(>=5.3) && $AsyncAwait
  func recover() async throws -> PrivySDK.WalletRecoverResponseData
  #endif
  func logout()
  func attemptConnectWalletOnAuthentication()
}
public enum LoginWithEmailError : Swift.Error {
  case emailNotSpecified
  case incorrectCode
  case loginError(any Swift.Error)
}
public enum OtpFlowState {
  case initial
  case sourceNotSpecified
  case sendCodeFailure(_: (any Swift.Error)? = nil)
  case sendingCode
  case awaitingCodeInput
  case submittingCode
  case incorrectCode
  case loginError(any Swift.Error)
  case done
}
extension PrivySDK.OtpFlowState {
  public var displayName: Swift.String {
    get
  }
}
public struct WalletConnectResponseData {
  public let address: Swift.String
}
extension PrivySDK.WalletConnectResponseData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SiweFlowState {
  case initial
  case generatingMessage
  case awaitingSignature
  case submittingSignature
  case done
  case error((any Swift.Error)?)
}
public struct SiweMessageParams {
  public init(appDomain: Swift.String, appUri: Swift.String, chainId: Swift.String, walletAddress: Swift.String)
}
public struct PrivyUser : Swift.Codable {
  public let id: Swift.String
  public let createdAt: Swift.Int
  public let linkedAccounts: [PrivySDK.LinkedAccount]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EmailAccount : Swift.Codable, Swift.Hashable {
  public let email: Swift.String
  public let verifiedAt: Foundation.TimeInterval
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PrivySDK.EmailAccount, b: PrivySDK.EmailAccount) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletRpcResponseData {
  public let address: Swift.String
  public let response: PrivySDK.WalletRpcResponseData.Response
}
extension PrivySDK.WalletRpcResponseData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PrivySDK.WalletRpcResponseData {
  public struct Response {
    public let method: Swift.String
    public let data: Swift.String
  }
}
extension PrivySDK.WalletRpcResponseData.Response : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletRpcResponse {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletLoginMetadata {
  public init(walletClientType: PrivySDK.WalletClientType?, connectorType: Swift.String?)
}
@_hasMissingDesignatedInitializers public class PrivySdk {
  public static func initialize(config: PrivySDK.PrivyConfig) -> any PrivySDK.Privy
  @objc deinit
}
public struct CustomAuth : Swift.Codable {
  public let userId: Swift.String
  public let verifiedAt: Foundation.TimeInterval
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum WalletClientType : Swift.String {
  case other
  case privy
  case coinbase_wallet
  case metamask
  case trust
  case safe
  case rainbow
  case uniswap
  case zerion
  case argent
  case spot
  case omni
  case cryptocom
  case blockchain
  case safepal
  case bitkeep
  case zengo
  case oneInch
  case binance
  case exodus
  case mew_wallet
  case alphawallet
  case keyring_pro
  case mathwallet
  case unstoppable
  case obvious
  case ambire
  case internet_money_wallet
  case coin98
  case abc_wallet
  case arculus_wallet
  case haha
  case cling_wallet
  case broearn
  case copiosa
  case burrito_wallet
  case enjin_wallet
  case plasma_wallet
  case avacus
  case bee
  case pitaka
  case pltwallet
  case minerva
  case kryptogo
  case prema
  case slingshot
  case kriptonio
  case timeless
  case secux
  case bitizen
  case blocto
  case safemoon
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct EmbeddedWallet : Swift.Codable, Swift.Hashable, Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public let address: Swift.String
  public let chainId: Swift.String?
  public let walletClientType: Swift.String?
  public let connectorType: Swift.String?
  public let recoveryMethod: Swift.String?
  public let verifiedAt: Foundation.TimeInterval
  public let hdWalletIndex: Swift.Int?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PrivySDK.EmbeddedWallet, b: PrivySDK.EmbeddedWallet) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum EmbeddedWalletState {
  case connecting
  case creating
  case recovering
  case disconnected
  case notCreated
  case needsRecovery
  case connected([PrivySDK.EmbeddedWallet])
  case error
}
extension PrivySDK.EmbeddedWalletState {
  public var toString: Swift.String {
    get
  }
}
extension PrivySDK.EmbeddedWalletState : Swift.Equatable {
  public static func == (lhs: PrivySDK.EmbeddedWalletState, rhs: PrivySDK.EmbeddedWalletState) -> Swift.Bool
}
public struct Utils {
  public static func toHexString(_ value: Any) -> Swift.String?
}
public enum PrivyEmbeddedWalletError : Swift.Error {
  case invalidParams
  case rpcUrlNotFound
  case rpcError
  case unsupportedChain
  case noRpcUrlFound
  case walletNotConnected
  case notAnEmbeddedWallet
  case noWalletFound
  public static func == (a: PrivySDK.PrivyEmbeddedWalletError, b: PrivySDK.PrivyEmbeddedWalletError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol EmbeddedWalletProvider {
  var chainId: Swift.Int { get }
  #if compiler(>=5.3) && $AsyncAwait
  func request(_ request: PrivySDK.RpcRequest) async throws -> PrivySDK.WalletRpcResponseData
  #endif
  func configure(chainId: Swift.Int, rpcUrl: Swift.String?)
}
public struct ExternalWallet : Swift.Codable, Swift.Hashable, Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public let address: Swift.String
  public let chainId: Swift.String?
  public let walletClientType: Swift.String?
  public let connectorType: Swift.String?
  public let verifiedAt: Foundation.TimeInterval
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PrivySDK.ExternalWallet, b: PrivySDK.ExternalWallet) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Privy {
  var authState: PrivySDK.AuthState { get }
  var email: any PrivySDK.LoginWithEmail { get }
  var sms: any PrivySDK.LoginWithSms { get }
  var siwe: any PrivySDK.LoginWithSiwe { get }
  var customJwt: any PrivySDK.LoginWithCustomAccessToken { get }
  var embeddedWallet: any PrivySDK.EmbeddedWalletManager { get }
  func setAuthStateChangeCallback(_ onAuthStateChange: PrivySDK.AuthStateChangeCallback?)
  #if compiler(>=5.3) && $AsyncAwait
  func refreshSession() async throws -> PrivySDK.AuthSession
  #endif
  func logout()
}
public typealias AuthStateChangeCallback = (PrivySDK.AuthState) -> Swift.Void
public struct PrivyConfig {
  public let appId: Swift.String
  public var baseUrl: Swift.String
  public init(appId: Swift.String)
}
public enum SupportedChain : Swift.CaseIterable {
  case mainnet
  case sepolia
  case goerli
  case base
  case baseGoerli
  case baseSepolia
  case optimism
  case matic
  case filecoinMainnet
  case optimismGoerli
  case arbitrum
  case celo
  case celoAlfajores
  case avalancheFuji
  case avalanche
  case lineaTestnet
  case lineaMainnet
  case polygonMumbai
  case filecoinCalibration
  case arbitrumGoerli
  public static func == (a: PrivySDK.SupportedChain, b: PrivySDK.SupportedChain) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrivySDK.SupportedChain]
  public static var allCases: [PrivySDK.SupportedChain] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrivySDK.SupportedChain {
  public var chainInfo: PrivySDK.ChainInfo {
    get
  }
}
public enum PrivyWalletError {
  case notConnected
  case creationFailed(Swift.String)
  case additionalWalletsBlocked
  case connectionFailed(Swift.String)
  case recoveryFailed(Swift.String)
  case noWalletAvailable
  case maxNumberOfAdditionalWallet
}
extension PrivySDK.PrivyWalletError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct WalletCreateResponseData : Swift.Codable {
  public let address: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SessionUpdateAction : Swift.String, Swift.Decodable {
  case set
  case clear
  case ignore
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ChainInfo {
  public let id: Swift.Int
  public let name: Swift.String
  public let network: Swift.String
  public let nativeCurrency: PrivySDK.NativeCurrency
  public let rpcUrls: PrivySDK.RpcUrls
  public let blockExplorers: PrivySDK.BlockExplorers
  public let contracts: PrivySDK.Contracts?
  public let testnet: Swift.Bool
  public init(id: Swift.Int, name: Swift.String, network: Swift.String, nativeCurrency: PrivySDK.NativeCurrency, rpcUrls: PrivySDK.RpcUrls, blockExplorers: PrivySDK.BlockExplorers, contracts: PrivySDK.Contracts? = nil, testnet: Swift.Bool = false)
}
public struct NativeCurrency {
  public let name: Swift.String
  public let symbol: Swift.String
  public let decimals: Swift.Int
}
public struct RpcUrl {
  public let http: [Swift.String]
  public let webSocket: [Swift.String]?
}
public struct RpcUrls {
  public let `default`: PrivySDK.RpcUrl
  public let `public`: PrivySDK.RpcUrl
  public let blast: PrivySDK.RpcUrl?
  public let alchemy: PrivySDK.RpcUrl?
  public let infura: PrivySDK.RpcUrl?
  public init(default: PrivySDK.RpcUrl, public: PrivySDK.RpcUrl, alchemy: PrivySDK.RpcUrl? = nil, infura: PrivySDK.RpcUrl? = nil, blast: PrivySDK.RpcUrl? = nil)
}
public struct BlockExplorer {
  public let name: Swift.String
  public let url: Swift.String
}
public struct BlockExplorers {
  public let etherscan: PrivySDK.BlockExplorer
  public let `default`: PrivySDK.BlockExplorer?
  public let filscan: PrivySDK.BlockExplorer?
  public init(etherscan: PrivySDK.BlockExplorer, default: PrivySDK.BlockExplorer? = nil, filscan: PrivySDK.BlockExplorer? = nil)
}
public struct Contracts {
  public let multicall3: PrivySDK.Multicall3
}
public struct Multicall3 {
  public let address: Swift.String
  public let blockCreated: Swift.Int
}
public struct PhoneNumberAccount : Swift.Codable, Swift.Hashable {
  public let phoneNumber: Swift.String
  public let verifiedAt: Foundation.TimeInterval
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PrivySDK.PhoneNumberAccount, b: PrivySDK.PhoneNumberAccount) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletSetPasswordResponseData {
  public let address: Swift.String
}
extension PrivySDK.WalletSetPasswordResponseData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PrivySDK.EmbeddedWalletProvider {
  public func isEqualTo(provider2: any PrivySDK.EmbeddedWalletProvider) -> Swift.Bool
}
public protocol LoginWithSms {
  var otpState: PrivySDK.OtpFlowState { get }
  func setOtpFlowStateChangeCallback(_ otpFlowStateCallback: @escaping PrivySDK.OtpFlowStateChangeCallback)
  #if compiler(>=5.3) && $AsyncAwait
  func sendCode(to phoneNumber: Swift.String) async -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func loginWithCode(_ code: Swift.String, sentTo phoneNumber: Swift.String?) async throws -> PrivySDK.AuthState
  #endif
}
extension PrivySDK.LoginWithSms {
  #if compiler(>=5.3) && $AsyncAwait
  public func loginWithCode(_ code: Swift.String) async throws -> PrivySDK.AuthState
  #endif
}
public enum LoginWithSmsError : Swift.Error {
  case phoneNumberNotSpecified
  case incorrectCode
  case loginError(any Swift.Error)
}
public enum AuthState {
  case notReady
  case unauthenticated
  case authenticated(PrivySDK.AuthSession)
  case error(any Swift.Error)
}
extension PrivySDK.AuthState {
  public var toString: Swift.String {
    get
  }
}
extension PrivySDK.AuthState : Swift.Equatable {
  public static func == (lhs: PrivySDK.AuthState, rhs: PrivySDK.AuthState) -> Swift.Bool
}
public enum PrivyError {
  case notReady
  case notLoggedIn
  case tokenError
  case timeout
  case dataParse
  case secureContextFailed(any Swift.Error)
}
extension PrivySDK.PrivyError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct JWT {
}
public typealias OtpFlowStateChangeCallback = (PrivySDK.OtpFlowState) -> Swift.Void
public enum LoginMethod : Swift.Codable {
  case customAccessToken
  case email
  case phone
  case siwe
  public static func == (a: PrivySDK.LoginMethod, b: PrivySDK.LoginMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
#if compiler(>=5.3) && $AsyncAwait
public typealias TokenProvider = () async throws -> Swift.String?
#endif
public protocol LoginWithCustomAccessToken {
  #if compiler(>=5.3) && $AsyncAwait
  func setTokenProvider(_ tokenProvider: PrivySDK.TokenProvider?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func loginWithCustomAccessToken() async throws -> PrivySDK.AuthState
  #endif
}
public struct AuthSession : Swift.Codable {
  public let user: PrivySDK.PrivyUser
  public let authToken: Swift.String
  public let refreshToken: Swift.String
  public let loginMethod: PrivySDK.LoginMethod
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LoginWithSiweError : Swift.Error {
  case generateMessageFailure
  case chainIdNotSpecified
  case missingGeneratedMessage
  public static func == (a: PrivySDK.LoginWithSiweError, b: PrivySDK.LoginWithSiweError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RpcRequest {
  public let method: Swift.String
  public let params: [Swift.String]
  public init(method: Swift.String, params: [Swift.String])
}
public enum LinkedAccount : Swift.Codable {
  case customAuth(PrivySDK.CustomAuth)
  case embeddedWallet(PrivySDK.EmbeddedWallet)
  case externalWallet(PrivySDK.ExternalWallet)
  case email(PrivySDK.EmailAccount)
  case phone(PrivySDK.PhoneNumberAccount)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol LoginWithEmail {
  var otpState: PrivySDK.OtpFlowState { get }
  func setOtpFlowStateChangeCallback(_ otpFlowStateCallback: @escaping PrivySDK.OtpFlowStateChangeCallback)
  #if compiler(>=5.3) && $AsyncAwait
  func sendCode(to email: Swift.String) async -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func loginWithCode(_ code: Swift.String, sentTo email: Swift.String?) async throws -> PrivySDK.AuthState
  #endif
}
extension PrivySDK.LoginWithEmail {
  #if compiler(>=5.3) && $AsyncAwait
  public func loginWithCode(_ code: Swift.String) async throws -> PrivySDK.AuthState
  #endif
}
public struct WalletRecoverResponseData {
  public let address: Swift.String
}
extension PrivySDK.WalletRecoverResponseData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletRecoverRequest {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol LoginWithSiwe {
  var siweFlowSate: PrivySDK.SiweFlowState { get }
  func setSiweFlowStateChangeCallback(_ siweFlowStateCallback: @escaping (PrivySDK.SiweFlowState) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  func generateSiweMessage(params: PrivySDK.SiweMessageParams, metadata: PrivySDK.WalletLoginMetadata?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func loginWithSiwe(_ signature: Swift.String, metadata: PrivySDK.WalletLoginMetadata?) async throws -> PrivySDK.AuthState
  #endif
}
extension PrivySDK.LoginWithSiwe {
  #if compiler(>=5.3) && $AsyncAwait
  public func generateSiweMessage(params: PrivySDK.SiweMessageParams) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func loginWithSiwe(_ signature: Swift.String) async throws -> PrivySDK.AuthState
  #endif
}
extension PrivySDK.WalletRpcResponse : Swift.Encodable {}
extension PrivySDK.WalletRpcResponse : Swift.Decodable {}
extension PrivySDK.WalletClientType : Swift.Equatable {}
extension PrivySDK.WalletClientType : Swift.Hashable {}
extension PrivySDK.WalletClientType : Swift.RawRepresentable {}
extension PrivySDK.PrivyEmbeddedWalletError : Swift.Equatable {}
extension PrivySDK.PrivyEmbeddedWalletError : Swift.Hashable {}
extension PrivySDK.SupportedChain : Swift.Equatable {}
extension PrivySDK.SupportedChain : Swift.Hashable {}
extension PrivySDK.SessionUpdateAction : Swift.Equatable {}
extension PrivySDK.SessionUpdateAction : Swift.Hashable {}
extension PrivySDK.SessionUpdateAction : Swift.RawRepresentable {}
extension PrivySDK.LoginMethod : Swift.Equatable {}
extension PrivySDK.LoginMethod : Swift.Hashable {}
extension PrivySDK.LoginWithSiweError : Swift.Equatable {}
extension PrivySDK.LoginWithSiweError : Swift.Hashable {}
extension PrivySDK.WalletRecoverRequest : Swift.Encodable {}
extension PrivySDK.WalletRecoverRequest : Swift.Decodable {}
